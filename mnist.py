# -*- coding: utf-8 -*-
"""MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OqJNZimcjAlEvDC35oQoe8H5q3O8Jwfp
"""

# Commented out IPython magic to ensure Python compatibility.
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.datasets import *
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
# %matplotlib inline

digit = load_digits()
dig = pd.DataFrame(digit['data'][0:])
len(dig)
digit.keys()

dig.head(5)

"""###fonction d'afichage"""

def displayImage(i):
    plt.imshow(digit['images'][i], cmap='Greys_r')
    plt.show()
displayImage(0)

"""Dans cette partie je definie le Variable d'entre et sortie et je decoupe mon dataSet en generale les dataSet se decoupe en 75% pour aprentissage trainning et 25% pour les test"""

train_x = digit.data # les input variables
train_y = digit.target # les étiquettes (output variable)
#découpage du jeu de données
x_train,x_test,y_train,y_test=train_test_split(train_x,train_y,test_size=0.25)

"""entraîner K-NN, le premier argument étant les input features  qui correspond à l’encodage des chiffres en format matriciel. Le deuxième arguement indique pour chaque observation son étiquette"""

KNN = KNeighborsClassifier(7) # on veut entrainer un 7-NN Classifier (on utilise 7 voisins)
KNN.fit(x_train, y_train) #fit notre model

print(KNN.score(x_test,y_test))

"""Prédictions et résultats

preparer l'image pour test le model
"""

test = np.array(digit['data'][1726]) #index 
Image_to_predict = test.reshape(1,-1)
displayImage(1726)

KNN.predict(Image_to_predict)